language: cpp

matrix:
  include:
  - os: linux
    env:
    - DEPLOY_RELEASE=true
  - os: linux
    env:
    - RUN_COVERALLS=true
  - os: osx
    env:
    - DEPLOY_RELEASE=true

branches:
  only:
  - master
  - /^\d+\.\d+(\.\d+)?(-\S*)?$/

install:
- if [ $RUN_COVERALLS == true ]; then pip install --user cpp-coveralls; fi
- if [ $TRAVIS_OS_NAME == osx ]; then unset -f cd; fi

script:
- set -e
- cd tools/batch/ && ./update_parser_by_scheme.sh && cd ../../
- mkdir ./build && cd ./build
- if [ $RUN_COVERALLS == true ]; then cmake -D LIBGLTF_COVERAGE_GCOV=TRUE ./../; else cmake ./../; fi
- make
- cd ./../

after_success:
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/nothing.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/Monster/glTF/Monster.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/Monster/glTF-Binary/Monster.glb; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/Monster/glTF-Draco/Monster.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/Monster/glTF-Embedded/Monster.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/Avocado/glTF-pbrSpecularGlossiness/Avocado.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/Cameras/glTF/Cameras.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/EnvironmentTest/glTF/EnvironmentTest.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/EnvironmentTest/glTF-IBL/EnvironmentTest.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/MorphPrimitivesTest/glTF/MorphPrimitivesTest.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/Triangle/glTF/Triangle.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/TriangleWithoutIndices/glTF/TriangleWithoutIndices.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/TwoSidedPlane/glTF/TwoSidedPlane.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/UnlitTest/glTF/UnlitTest.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/2.0/VertexColorTest/glTF/VertexColorTest.gltf; fi
- if [ $RUN_COVERALLS == true ]; then coveralls --exclude ./external/ --exclude ./build/CMakeFiles/ --exclude ./output/include/ --gcov-options '\-lp'; fi

before_deploy:
- if [ $DEPLOY_RELEASE == true ]; then tar -czf libgltf.$TRAVIS_TAG.$TRAVIS_OS_NAME.tar.gz ./output/*; fi

deploy:
  provider: releases
  api-key:
    secure: $GITHUB_OAUTH_TOKEN_ENCRYPTED
  file: "libgltf.$TRAVIS_TAG.$TRAVIS_OS_NAME.tar.gz"
  skip_cleanup: true
  on:
    condition: $DEPLOY_RELEASE = true
    tags: true
    all_branches: false
