language: cpp

matrix:
  include:
  - os: linux
    env:
    - DEPLOY_RELEASE=true
  - os: linux
    env:
    - RUN_COVERALLS=true
  - os: osx
    env:
    - DEPLOY_RELEASE=true

branches:
  only:
  - master
  - /^\d+\.\d+(\.\d+)?(-\S*)?$/

install:
- if [ $RUN_COVERALLS == true ]; then pip install --user cpp-coveralls; fi
- if [ $TRAVIS_OS_NAME == osx ]; then unset -f cd; fi

script:
- set -e
- mkdir ./build && cd ./build
- if [ $RUN_COVERALLS == true ]; then cmake -D LIBGLTF_COVERAGE_GCOV=TRUE ./../; else cmake ./../; fi
- make
- cd ./../

after_success:
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./nothing.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/example-2.0/AnimatedMorphCube.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/example-2.0/BarramundiFish.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/example-2.0/BoxAnimated.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/example-2.0/Cameras.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/example-2.0/DamagedHelmet.Embedded.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/example-2.0/RiggedSimple.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/example-2.0/TextureCoordinateTest.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/example-2.0/TriangleWithoutIndices.gltf; fi
- if [ $RUN_COVERALLS == true ]; then ./output/bin/linux/runtest --coveralls ./resource/example-2.0/VC.gltf; fi
- if [ $RUN_COVERALLS == true ]; then coveralls --exclude ./external/ --exclude ./build/CMakeFiles/ --exclude ./output/include/ --gcov-options '\-lp'; fi

before_deploy:
- if [ $DEPLOY_RELEASE == true ]; then tar -czf libgltf.$TRAVIS_TAG.$TRAVIS_OS_NAME.tar.gz ./output/*; fi

deploy:
  provider: releases
  api-key:
    secure: $GITHUB_OAUTH_TOKEN_ENCRYPTED
  file: "libgltf.$TRAVIS_TAG.$TRAVIS_OS_NAME.tar.gz"
  skip_cleanup: true
  on:
    condition: $DEPLOY_RELEASE=true
    tags: true
    all_branches: false
