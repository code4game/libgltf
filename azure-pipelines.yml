jobs:

- job: coverage
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    lfs: true
    submodules: true
    displayName: "Pull all submodules"
  - script: |
      mkdir build
      cd build
      cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DLIBGLTF_CHARACTOR_ENCODING=UTF8 -DLIBGLTF_BUILD_GCOV=TRUE ../
      make
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/nothing.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/Monster/glTF/Monster.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/Monster/glTF-Binary/Monster.glb
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/Monster/glTF-Draco/Monster.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/Monster/glTF-Embedded/Monster.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/Avocado/glTF-pbrSpecularGlossiness/Avocado.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/Cameras/glTF/Cameras.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/EnvironmentTest/glTF/EnvironmentTest.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/EnvironmentTest/glTF-IBL/EnvironmentTest.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/MorphPrimitivesTest/glTF/MorphPrimitivesTest.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/Triangle/glTF/Triangle.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/TriangleWithoutIndices/glTF/TriangleWithoutIndices.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/TwoSidedPlane/glTF/TwoSidedPlane.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/UnlitTest/glTF/UnlitTest.gltf
      valgrind --leak-check=full --show-leak-kinds=all ./../output/bin/linux/runtest --coveralls ../resource/2.0/VertexColorTest/glTF/VertexColorTest.gltf
      gcov source/runtest/CMakeFiles/runtest.dir/runtest.cpp.gcda
      gcovr --root=../source/ .
      cd ../
    displayName: "Compile and Coverage"

- job: linux
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    lfs: true
    submodules: true
    displayName: "Pull all submodules"
  - script: |
      mkdir build
      cd build
      cmake -G "Unix Makefiles" ../
      make libgltf
      cd ../
    displayName: "Compile for Linux"

- job: macos
  pool:
    vmImage: 'macOS-latest'
  steps:
  - checkout: self
    lfs: true
    submodules: true
    displayName: "Pull all submodules"
  - script: |
      mkdir build
      cd build
      cmake -G "Unix Makefiles" ../
      make libgltf
      cd ../
    displayName: "Compile for macOS"

- job: ios
  pool:
    vmImage: 'macOS-latest'
  steps:
  - checkout: self
    lfs: true
    submodules: true
    displayName: "Pull all submodules"
  - script: |
      mkdir build
      cd build
      cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../external/ios-cmake/toolchain/iOS.cmake -DIOS_PLATFORM=OS -DLIBGLTF_PLATFORM_IOS=TRUE -DLIBGLTF_CHARACTOR_ENCODING=UTF8 ../
      make libgltf
      cd ../
    displayName: "Compile for iOS"

- job: vs2019_x32
  pool:
    vmImage: 'windows-latest'
  steps:
  - checkout: self
    lfs: true
    submodules: true
    displayName: "Pull all submodules"
  - script: |
      mkdir build
      cd build
      cmake -G "Visual Studio 16 2019" -A "Win32" -DLIBGLTF_CHARACTOR_ENCODING=UTF8 ../
      cd ../
    displayName: "CMake for VS2019 Win32"
  - task: MSBuild@1
    inputs:
      solution: build/libgltf.sln
      msbuildVersion: latest
      msbuildArchitecture: x32
      platform: Win32
      configuration: Release
      displayName: "Compile for VS2019 Win32"

- job: vs2019_x64
  pool:
    vmImage: 'windows-latest'
  steps:
  - checkout: self
    lfs: true
    submodules: true
    displayName: "Pull all submodules"
  - script: |
      mkdir build
      cd build
      cmake -G "Visual Studio 16 2019" -A "x64" -DLIBGLTF_CHARACTOR_ENCODING=UTF8 ../
      cd ../
    displayName: "CMake for VS2019 x64"
  - task: MSBuild@1
    inputs:
      solution: build/libgltf.sln
      msbuildVersion: latest
      msbuildArchitecture: x64
      platform: x64
      configuration: Release
      displayName: "Compile for VS2019 x64"
