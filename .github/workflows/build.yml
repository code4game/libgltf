name: 'build'

on:
  push:
    branches: [ '*' ]
    paths-ignore:
    - '!.github/build.yml'
    - 'docs/**'
    - 'resource/**'
    - '.coveralls.yml'
    - '.readthedocs.yml'
    - '.git*'
    - '*.md'
    - 'LICENSE'

jobs:
  check:
    name: 'check by cppcheck'
    runs-on: ubuntu-latest
    steps:
    - name: 'install cppcheck'
      run: sudo apt-get install cppcheck
    - name: 'checkout'
      uses: actions/checkout@v2
    - name: 'check'
      run: cppcheck ./ --enable=warning,performance,portability --xml-version=2 --error-exitcode=1 -i external/ -i build/ -i tools/
  windows:
    name: 'for windows'
    runs-on: windows-latest
    needs: check
    steps:
    - name: 'checkout the project'
      uses: actions/checkout@v2
    - name: 'update submodules'
      run: |
        git submodule update --init external/rapidjson
        git submodule update --init external/draco
    - name: 'add msbuild'
      uses: microsoft/setup-msbuild@v1.0.2
    - name: 'build and make'
      run: |
        cmake -B build/win64 -G "Visual Studio 17 2022" -A "x64" -DLIBGLTF_WITH_MSVC_MT=FALSE -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build/win64 --target libgltf --config Debug
        cmake --build build/win64 --target libgltf --config Release
        cmake --install build/win64 --prefix output/win64
        cmake -B build/win32 -G "Visual Studio 17 2022" -A "Win32" -DLIBGLTF_WITH_MSVC_MT=FALSE -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build/win32 --target libgltf --config Debug
        cmake --build build/win32 --target libgltf --config Release
        cmake --install build/win32 --prefix output/win32
    - name: 'ready artifact'
      run: |
        xcopy /D /S /Y build\win64\draco\*.h output\win64\include\draco\
        xcopy /D /S /Y external\draco\src\draco\*.h output\win64\include\draco\
        xcopy /D /S /Y build\win64\external\draco\Release\draco.lib output\win64\lib\Release\
        xcopy /D /S /Y build\win64\external\draco\Debug\dracod.lib output\win64\lib\Debug\
        xcopy /D /S /Y build\win64\draco\*.h output\win32\include\draco\
        xcopy /D /S /Y external\draco\src\draco\*.h output\win32\include\draco\
        xcopy /D /S /Y build\win32\external\draco\Release\draco.lib output\win32\lib\Release\
        xcopy /D /S /Y build\win32\external\draco\Debug\dracod.lib output\win32\lib\Debug\
    - name: 'upload artifact'
      uses: actions/upload-artifact@v1.0.0
      with:
        name: libgltf.windows
        path: output/

  linux:
    name: 'for linux'
    runs-on: ubuntu-latest
    needs: check
    steps:
    - name: 'checkout the project'
      uses: actions/checkout@v2
    - name: 'update submodules'
      run: |
        git submodule update --init external/rapidjson
        git submodule update --init external/draco
    - name: 'build and make'
      run: |
        cmake -B build -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build --target libgltf --config Release
        cmake --install build --prefix output/linux
    - name: 'ready artifact'
      run: |
        rsync -a --include='*.h' -f 'hide,! */' build/draco/ output/linux/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/linux/include/draco/
        cp -a build/external/draco/draco.a output/linux/lib/draco.a
    - name: 'upload artifact'
      uses: actions/upload-artifact@v1.0.0
      with:
        name: libgltf.linux
        path: output/

  macos:
    name: 'for macos'
    runs-on: macos-latest
    needs: check
    steps:
    - name: 'checkout the project'
      uses: actions/checkout@v2
    - name: 'update submodules'
      run: |
        git submodule update --init external/rapidjson
        git submodule update --init external/draco
    - name: 'build and make'
      run: |
        cmake -B build -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build --target libgltf --config Release
        cmake --install build --prefix output/macos
    - name: 'ready artifact'
      run: |
        rsync -a --include='*.h' -f 'hide,! */' build/draco/ output/macos/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/macos/include/draco/
        cp build/external/draco/draco.a output/macos/lib/draco.a
    - name: 'upload artifact'
      uses: actions/upload-artifact@v1.0.0
      with:
        name: libgltf.macos
        path: output/

  android:
    name: 'for android api19'
    runs-on: ubuntu-latest
    needs: check
    steps:
    - name: 'install'
      run: |
        sudo apt-get install ninja-build
    - name: 'checkout the project'
      uses: actions/checkout@v2
    - name: 'update submodules'
      run: |
        git submodule update --init external/rapidjson
        git submodule update --init external/draco
    - name: 'build and make'
      run: |
        export ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk-bundle
        cmake -B build/armeabi-v7a -G "Ninja" -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_ARM_NEON=FALSE -DANDROID_NDK=$ANDROID_NDK_HOME -DANDROID_NATIVE_API_LEVEL=19 -DANDROID_TOOLCHAIN=clang -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build/armeabi-v7a --target libgltf --config Release
        cmake --install build --prefix output/armeabi-v7a
        cmake -B build/armeabi-v7a-with-neon -G "Ninja" -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_ARM_NEON=TRUE -DANDROID_NDK=$ANDROID_NDK_HOME -DANDROID_NATIVE_API_LEVEL=19 -DANDROID_TOOLCHAIN=clang -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build/armeabi-v7a-with-neon --target libgltf --config Release
        cmake --install build --prefix output/armeabi-v7a-with-neon
        cmake -B build/arm64-v8a -G "Ninja" -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_ARM_NEON=FALSE -DANDROID_NDK=$ANDROID_NDK_HOME -DANDROID_NATIVE_API_LEVEL=19 -DANDROID_TOOLCHAIN=clang -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build/arm64-v8a --target libgltf --config Release
        cmake --install build --prefix output/arm64-v8a
        cmake -B build/x86 -G "Ninja" -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=x86 -DANDROID_ARM_NEON=FALSE -DANDROID_NDK=$ANDROID_NDK_HOME -DANDROID_NATIVE_API_LEVEL=19 -DANDROID_TOOLCHAIN=clang -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build/x86 --target libgltf --config Release
        cmake --install build --prefix output/x86
        cmake -B build/x86_64 -G "Ninja" -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=x86_64 -DANDROID_ARM_NEON=FALSE -DANDROID_NDK=$ANDROID_NDK_HOME -DANDROID_NATIVE_API_LEVEL=19 -DANDROID_TOOLCHAIN=clang -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build/x86_64 --target libgltf --config Release
        cmake --install build --prefix output/x86_64
    - name: 'ready artifact'
      run: |
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/armeabi-v7a/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' build/armeabi-v7a/draco/ output/armeabi-v7a/include/draco/
        cp -a build/armeabi-v7a/external/draco/draco.a output/armeabi-v7a/lib/draco.a
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/armeabi-v7a-with-neon/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' build/armeabi-v7a/draco/ output/armeabi-v7a-with-neon/include/draco/
        cp -a build/armeabi-v7a-with-neon/external/draco/draco.a output/armeabi-v7a-with-neon/lib/draco.a
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/arm64-v8a/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' build/armeabi-v7a/draco/ output/arm64-v8a/include/draco/
        cp -a build/arm64-v8a/external/draco/draco.a output/arm64-v8a/lib/draco.a
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/x86/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' build/armeabi-v7a/draco/ output/x86/include/draco/
        cp -a build/x86/external/draco/draco.a output/x86/lib/draco.a
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/x86_64/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' build/armeabi-v7a/draco/ output/x86_64/include/draco/
        cp -a build/x86_64/external/draco/draco.a output/x86_64/lib/draco.a
    - name: 'upload artifact'
      uses: actions/upload-artifact@v1.0.0
      with:
        name: libgltf.android.api19
        path: output/

  ios:
    name: 'for ios'
    runs-on: macos-latest
    needs: check
    steps:
    - name: 'checkout the project'
      uses: actions/checkout@v2
    - name: 'update submodules'
      run: |
        git submodule update --init external/rapidjson
        git submodule update --init external/draco
        git submodule update --init external/ios-cmake
    - name: 'build and make'
      run: |
        cmake -B build/iphoneos -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../external/ios-cmake/toolchain/iOS.cmake -DLIBGLTF_BUILD_RUNTEST=FALSE -DIOS_PLATFORM=OS -DLIBGLTF_PLATFORM_IOS=TRUE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build/iphoneos --target libgltf --config Release
        cmake --install build/iphoneos --prefix output/iphoneos
        cmake -B build/watchos -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../external/ios-cmake/toolchain/iOS.cmake -DIOS_PLATFORM=WATCHOS -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_PLATFORM_IOS=TRUE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build/watchos --target libgltf --config Release
        cmake --install build/watchos --prefix output/watchos
        cmake -B build/simulator -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../external/ios-cmake/toolchain/iOS.cmake -DIOS_PLATFORM=SIMULATOR -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_PLATFORM_IOS=TRUE -DLIBGLTF_WITH_GOOGLE_DRACO=TRUE .
        cmake --build build/simulator --target libgltf --config Release
        cmake --install build/simulator --prefix output/simulator
    - name: 'ready artifact'
      run: |
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/iphoneos/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' build/iphoneos/draco/ output/iphoneos/include/draco/
        cp build/iphoneos/external/draco/draco.a output/iphoneos/lib/draco.a
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/watchos/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' build/iphoneos/draco/ output/watchos/include/draco/
        cp build/watchos/external/draco/draco.a output/watchos/lib/draco.a
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/simulator/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' build/iphoneos/draco/ output/simulator/include/draco/
        cp build/simulator/external/draco/draco.a output/simulator/lib/draco.a
    - name: 'upload artifact'
      uses: actions/upload-artifact@v1.0.0
      with:
        name: libgltf.ios
        path: output/
