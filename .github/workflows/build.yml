name: 'build'

on:
  push:
    branches: [ '*' ]
    paths-ignore:
    - '!.github/build.yml'
    - 'docs/**'
    - '.coveralls.yml'
    - '.readthedocs.yml'
    - '.git*'
    - '*.md'
    - 'LICENSE'

jobs:
  check:
    name: 'check by cppcheck'
    runs-on: ubuntu-latest
    steps:
    - name: 'install cppcheck'
      run: sudo apt-get install cppcheck
    - name: 'checkout'
      uses: actions/checkout@v2
    - name: 'check'
      run: cppcheck ./ --enable=warning,performance,portability --xml-version=2 --error-exitcode=1 -i external/ -i build/ -i tools/
  windows:
    name: 'for windows'
    runs-on: windows-latest
    needs: check
    steps:
    - name: 'checkout the project'
      uses: actions/checkout@v2
    - name: 'update submodules'
      run: |
        git submodule update --init external/rapidjson
        git submodule update --init external/draco
    - name: 'add msbuild'
      uses: microsoft/setup-msbuild@v1.0.2
    - name: 'build and make'
      run: |
        mkdir build && cd build/
        mkdir win64 && cd win64/
        cmake -G "Visual Studio 16 2019" -A "x64" -LIBGLTF_BUILD_MSVC_WITH_MT=TRUE -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../../
        msbuild libgltf.sln /t:Build /p:Configuration="Release" /p:Platform="x64"
        msbuild libgltf.sln /t:Build /p:Configuration="Debug" /p:Platform="x64"
        cd ../
        mkdir win32 && cd win32/
        cmake -G "Visual Studio 16 2019" -A "Win32" -LIBGLTF_BUILD_MSVC_WITH_MT=TRUE -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../../
        msbuild libgltf.sln /t:Build /p:Configuration="Release" /p:Platform="Win32"
        msbuild libgltf.sln /t:Build /p:Configuration="Debug" /p:Platform="Win32"
        cd ../
        cd ../
    - name: 'ready artifact'
      run: |
        xcopy /D /S /Y build\win64\draco\*.h output\include\draco\
        xcopy /D /S /Y external\draco\src\draco\*.h output\include\draco\
        xcopy /D /S /Y build\win64\external\draco\Release\dracodec.lib output\lib\win64\Release\
        xcopy /D /S /Y build\win64\external\draco\Release\dracoenc.lib output\lib\win64\Release\
        xcopy /D /S /Y build\win64\external\draco\Debug\dracodecd.lib output\lib\win64\Debug\
        xcopy /D /S /Y build\win64\external\draco\Debug\dracoencd.lib output\lib\win64\Debug\
        xcopy /D /S /Y build\win32\external\draco\Release\dracodec.lib output\lib\win32\Release\
        xcopy /D /S /Y build\win32\external\draco\Release\dracoenc.lib output\lib\win32\Release\
        xcopy /D /S /Y build\win32\external\draco\Debug\dracodecd.lib output\lib\win32\Debug\
        xcopy /D /S /Y build\win32\external\draco\Debug\dracoencd.lib output\lib\win32\Debug\
    - name: 'upload artifact'
      uses: actions/upload-artifact@v1.0.0
      with:
        name: libgltf.windows
        path: output/

  linux:
    name: 'for linux'
    runs-on: ubuntu-latest
    needs: check
    steps:
    - name: 'checkout the project'
      uses: actions/checkout@v2
    - name: 'update submodules'
      run: |
        git submodule update --init external/rapidjson
        git submodule update --init external/draco
    - name: 'build and make'
      run: |
        mkdir build && cd build
        cmake -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../
        make dracodec
        make dracoenc
        make libgltf
        cd ..
    - name: 'ready artifact'
      run: |
        rsync -a --include='*.h' -f 'hide,! */' build/draco/ output/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/include/draco/
        cp -a build/external/draco/dracodec.a output/lib/linux/dracodec.a
        cp -a build/external/draco/dracoenc.a output/lib/linux/dracoenc.a
    - name: 'upload artifact'
      uses: actions/upload-artifact@v1.0.0
      with:
        name: libgltf.linux
        path: output/

  macos:
    name: 'for macos'
    runs-on: macos-latest
    needs: check
    steps:
    - name: 'checkout the project'
      uses: actions/checkout@v2
    - name: 'update submodules'
      run: |
        git submodule update --init external/rapidjson
        git submodule update --init external/draco
    - name: 'build and make'
      run: |
        mkdir build && cd build
        cmake -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../
        make dracodec
        make dracoenc
        make libgltf
        cd ..
    - name: 'ready artifact'
      run: |
        rsync -a --include='*.h' -f 'hide,! */' build/draco/ output/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/include/draco/
        cp build/external/draco/dracodec.a output/lib/macos/dracodec.a
        cp build/external/draco/dracoenc.a output/lib/macos/dracoenc.a
    - name: 'upload artifact'
      uses: actions/upload-artifact@v1.0.0
      with:
        name: libgltf.macos
        path: output/

  android:
    name: 'for android api19'
    runs-on: ubuntu-latest
    needs: check
    steps:
    - name: 'install'
      run: |
        sudo apt-get install ninja-build
    - name: 'checkout the project'
      uses: actions/checkout@v2
    - name: 'update submodules'
      run: |
        git submodule update --init external/rapidjson
        git submodule update --init external/draco
    - name: 'build and make'
      run: |
        export ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk-bundle
        mkdir build && cd build
        mkdir armeabi-v7a && cd armeabi-v7a
        cmake -G "Ninja" -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_ARM_NEON=FALSE -DANDROID_NDK=$ANDROID_NDK_HOME -DANDROID_NATIVE_API_LEVEL=19 -DANDROID_TOOLCHAIN=clang -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_CHARACTOR_ENCODING=UTF8 -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../../
        ninja dracodec
        ninja dracoenc
        ninja libgltf
        cd ../
        mkdir armeabi-v7a-with-neon && cd armeabi-v7a-with-neon
        cmake -G "Ninja" -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_ARM_NEON=TRUE -DANDROID_NDK=$ANDROID_NDK_HOME -DANDROID_NATIVE_API_LEVEL=19 -DANDROID_TOOLCHAIN=clang -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_CHARACTOR_ENCODING=UTF8 -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../../
        ninja dracodec
        ninja dracoenc
        ninja libgltf
        cd ../
        mkdir arm64-v8a && cd arm64-v8a
        cmake -G "Ninja" -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_ARM_NEON=FALSE -DANDROID_NDK=$ANDROID_NDK_HOME -DANDROID_NATIVE_API_LEVEL=19 -DANDROID_TOOLCHAIN=clang -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_CHARACTOR_ENCODING=UTF8 -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../../
        ninja dracodec
        ninja dracoenc
        ninja libgltf
        cd ../
        mkdir x86 && cd x86
        cmake -G "Ninja" -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=x86 -DANDROID_ARM_NEON=FALSE -DANDROID_NDK=$ANDROID_NDK_HOME -DANDROID_NATIVE_API_LEVEL=19 -DANDROID_TOOLCHAIN=clang -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_CHARACTOR_ENCODING=UTF8 -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../../
        ninja dracodec
        ninja dracoenc
        ninja libgltf
        cd ../
        mkdir x86_64 && cd x86_64
        cmake -G "Ninja" -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=x86_64 -DANDROID_ARM_NEON=FALSE -DANDROID_NDK=$ANDROID_NDK_HOME -DANDROID_NATIVE_API_LEVEL=19 -DANDROID_TOOLCHAIN=clang -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_CHARACTOR_ENCODING=UTF8 -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../../
        ninja dracodec
        ninja dracoenc
        ninja libgltf
        cd ../
        cd ../
    - name: 'ready artifact'
      run: |
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' build/armeabi-v7a/draco/ output/include/draco/
        cp -a build/armeabi-v7a/external/draco/dracodec.a output/lib/android/armeabi-v7a/dracodec.a
        cp -a build/armeabi-v7a/external/draco/dracoenc.a output/lib/android/armeabi-v7a/dracoenc.a
        cp -a build/armeabi-v7a-with-neon/external/draco/dracodec.a output/lib/android/armeabi-v7a-with-neon/dracodec.a
        cp -a build/armeabi-v7a-with-neon/external/draco/dracoenc.a output/lib/android/armeabi-v7a-with-neon/dracoenc.a
        cp -a build/arm64-v8a/external/draco/dracodec.a output/lib/android/arm64-v8a/dracodec.a
        cp -a build/arm64-v8a/external/draco/dracoenc.a output/lib/android/arm64-v8a/dracoenc.a
        cp -a build/x86/external/draco/dracodec.a output/lib/android/x86/dracodec.a
        cp -a build/x86/external/draco/dracoenc.a output/lib/android/x86/dracoenc.a
        cp -a build/x86_64/external/draco/dracodec.a output/lib/android/x86_64/dracodec.a
        cp -a build/x86_64/external/draco/dracoenc.a output/lib/android/x86_64/dracoenc.a
    - name: 'upload artifact'
      uses: actions/upload-artifact@v1.0.0
      with:
        name: libgltf.android.api19
        path: output/

  ios:
    name: 'for ios'
    runs-on: macos-latest
    needs: check
    steps:
    - name: 'checkout the project'
      uses: actions/checkout@v2
    - name: 'update submodules'
      run: |
        git submodule update --init external/rapidjson
        git submodule update --init external/draco
        git submodule update --init external/ios-cmake
    - name: 'build and make'
      run: |
        mkdir build && cd build
        mkdir iphoneos && cd iphoneos
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../external/ios-cmake/toolchain/iOS.cmake -DLIBGLTF_BUILD_RUNTEST=FALSE -DIOS_PLATFORM=OS -DLIBGLTF_PLATFORM_IOS=TRUE -DLIBGLTF_CHARACTOR_ENCODING=UTF8 -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../../
        make dracodec
        make dracoenc
        make libgltf
        cd ../
        mkdir watchos && cd watchos
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../external/ios-cmake/toolchain/iOS.cmake -DIOS_PLATFORM=WATCHOS -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_PLATFORM_IOS=TRUE -DLIBGLTF_CHARACTOR_ENCODING=UTF8 -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../../
        make dracodec
        make dracoenc
        make libgltf
        cd ../
        mkdir simulator && cd simulator
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../external/ios-cmake/toolchain/iOS.cmake -DIOS_PLATFORM=SIMULATOR -DLIBGLTF_BUILD_RUNTEST=FALSE -DLIBGLTF_PLATFORM_IOS=TRUE -DLIBGLTF_CHARACTOR_ENCODING=UTF8 -DLIBGLTF_USE_GOOGLE_DRACO=TRUE -DLIBGLTF_USE_GOOGLE_DRACO_SUBMODULE=TRUE ../../
        make dracodec
        make dracoenc
        make libgltf
        cd ../
        cd ../
    - name: 'ready artifact'
      run: |
        rsync -a --include='*.h' -f 'hide,! */' external/draco/src/draco/ output/include/draco/
        rsync -a --include='*.h' -f 'hide,! */' build/iphoneos/draco/ output/include/draco/
        cp build/iphoneos/external/draco/dracodec.a output/lib/ios/os/dracodec.a
        cp build/iphoneos/external/draco/dracoenc.a output/lib/ios/os/dracoenc.a
        cp build/watchos/external/draco/dracodec.a output/lib/ios/watchos/dracodec.a
        cp build/watchos/external/draco/dracoenc.a output/lib/ios/watchos/dracoenc.a
        cp build/simulator/external/draco/dracodec.a output/lib/ios/simulator/dracodec.a
        cp build/simulator/external/draco/dracoenc.a output/lib/ios/simulator/dracoenc.a
    - name: 'upload artifact'
      uses: actions/upload-artifact@v1.0.0
      with:
        name: libgltf.ios
        path: output/
