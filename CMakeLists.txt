cmake_minimum_required(VERSION 2.8.11)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
enable_testing()
set(CMAKE_INSTALL_PREFIX "install" CACHE STRING "prefix")

project(libgltf)

set(CMAKE_DEBUG_POSTFIX "d")

# define the platform
set(PLATFORM_WINDOWS FALSE)
set(PLATFORM_LINUX FALSE)
set(PLATFORM_MACOS FALSE)

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(PLATFORM_WINDOWS TRUE)
    add_definitions(-DPLATFORM_WINDOWS)
    set(DYNAMIC_LIBRARY_EXTENSION ".dll")
    set(STATIC_LIBRARY_EXTENSION ".lib")
    if((CMAKE_EXE_LINKER_FLAGS STREQUAL "/machine:X86") OR (CMAKE_EXE_LINKER_FLAGS STREQUAL " /machine:X86"))
        set(TARGET_ARCHITECTURES_X86 TRUE)
        set(PLATFORM_NAME "win32")
    elseif((CMAKE_EXE_LINKER_FLAGS STREQUAL "/machine:x64") OR (CMAKE_EXE_LINKER_FLAGS STREQUAL " /machine:x64"))
        set(TARGET_ARCHITECTURES_X64 TRUE)
        set(PLATFORM_NAME "win64")
    endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(PLATFORM_LINUX TRUE)
    add_definitions(-DPLATFORM_LINUX)
    set(DYNAMIC_LIBRARY_EXTENSION ".so")
    set(STATIC_LIBRARY_EXTENSION ".a")
    set(PLATFORM_NAME "linux")
    set(CMAKE_CXX_FLAGS "-std=c++11 -Wall -Wextra -Wshadow -Wconversion -Wsign-conversion -Wno-long-long -pedantic ${CMAKE_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "-Wall -Wextra -Wshadow -Wconversion -Wno-long-long -pedantic ${CMAKE_C_FLAGS}")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(PLATFORM_MACOS TRUE)
    add_definitions(-DPLATFORM_MACOS)
    set(DYNAMIC_LIBRARY_EXTENSION ".dylib")
    set(STATIC_LIBRARY_EXTENSION ".a")
    set(PLATFORM_NAME "macos")
    set(CMAKE_CXX_FLAGS "-std=c++11 -Wall -Wextra -Wshadow -Wconversion -Wsign-conversion -Wno-long-long -pedantic ${CMAKE_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "-Wall -Wextra -Wshadow -Wconversion -Wno-long-long -pedantic ${CMAKE_C_FLAGS}")
endif()

if((NOT ${PLATFORM_WINDOWS}) AND (NOT ${PLATFORM_LINUX}) AND (NOT ${PLATFORM_MACOS}))
    message(FATAL_ERROR "Sorry, don't support your system - ${CMAKE_SYSTEM_NAME}")
endif()

set(ROOT_PATH "${libgltf_SOURCE_DIR}")
set(HEADER_PATH "${ROOT_PATH}/include")
set(SOURCE_PATH "${ROOT_PATH}/source")
set(EXTERNAL_PATH "${ROOT_PATH}/external")
if(NOT CUSTOM_OUT_PATH)
    set(OUT_PATH "${ROOT_PATH}/output")
else()
    set(OUT_PATH ${CUSTOM_OUT_PATH})
endif()
set(OUT_BIN_PATH "${OUT_PATH}/bin/${PLATFORM_NAME}")
set(OUT_LIB_PATH "${ROOT_PATH}/output/lib/${PLATFORM_NAME}")
set(INTERNAL_OUT_PATH "${ROOT_PATH}/output")
set(INTERNAL_BIN_PATH "${INTERNAL_OUT_PATH}/bin/${PLATFORM_NAME}")

if((CMAKE_COMPILER_IS_GNUCC STREQUAL "1") OR (CMAKE_COMPILER_IS_GNUCXX STREQUAL "1"))
    add_definitions(-DCOMPILER_IS_GCC)
endif()

if(${PLATFORM_WINDOWS})
    add_definitions(-DUNICODE -D_UNICODE)
endif()

option(LIBGLTF_COVERAGE_GCOV "Coverage gcov (debug, Linux builds only)" OFF)
option(LIBGLTF_TEST_GTEST "Test with gtest" OFF)

if(LIBGLTF_BUILD_GCOV AND PLATFORM_LINUX)
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
  set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
  set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage -lgcov -lstdc++fs")
endif()

add_subdirectory(doc)
add_subdirectory(source)

set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT libgltf)
