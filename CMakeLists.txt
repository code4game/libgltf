cmake_minimum_required(VERSION 2.8.11)

project(libgltf)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
enable_testing()
set(CMAKE_INSTALL_PREFIX "install" CACHE STRING "prefix")

set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})
set(CMAKE_DEBUG_POSTFIX "d")

# define the platform
set(LIBGLTF_PLATFORM_WINDOWS    FALSE)
set(LIBGLTF_PLATFORM_LINUX      FALSE)
set(LIBGLTF_PLATFORM_MACOS      FALSE)
set(LIBGLTF_PLATFORM_ANDROID    FALSE)
set(LIBGLTF_PLATFORM_IOS        FALSE CACHE BOOL "Build for iOS?")

if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND MSVC)
    set(LIBGLTF_BUILD_MSVC_WITH_MT OFF CACHE BOOL "Build MSVC with 'MultiThreading?")
    if(${LIBGLTF_BUILD_MSVC_WITH_MT})
        foreach(flags
                CMAKE_CXX_FLAGS
                CMAKE_CXX_FLAGS_DEBUG
                CMAKE_CXX_FLAGS_RELEASE
                CMAKE_CXX_FLAGS_MINSIZEREL
                CMAKE_CXX_FLAGS_RELWITHDEBINFO
                CMAKE_C_FLAGS
                CMAKE_C_FLAGS_DEBUG
                CMAKE_C_FLAGS_RELEASE
                CMAKE_C_FLAGS_MINSIZEREL
                CMAKE_C_FLAGS_RELWITHDEBINFO)
		    if(${flags} MATCHES "/MD")
			    string(REGEX REPLACE "/MD" "/MT" ${flags} "${${flags}}")
		    endif()
		    if(${flags} MATCHES "/MDd")
			    string(REGEX REPLACE "/MDd" "/MTd" ${flags} "${${flags}}")
		    endif()
        endforeach()
    else()
        foreach(flags
                CMAKE_CXX_FLAGS
                CMAKE_CXX_FLAGS_DEBUG
                CMAKE_CXX_FLAGS_RELEASE
                CMAKE_CXX_FLAGS_MINSIZEREL
                CMAKE_CXX_FLAGS_RELWITHDEBINFO
                CMAKE_C_FLAGS
                CMAKE_C_FLAGS_DEBUG
                CMAKE_C_FLAGS_RELEASE
                CMAKE_C_FLAGS_MINSIZEREL
                CMAKE_C_FLAGS_RELWITHDEBINFO)
		    if(${flags} MATCHES "/MT")
			    string(REGEX REPLACE "/MT" "/MD" ${flags} "${${flags}}")
		    endif()
		    if(${flags} MATCHES "/MTd")
			    string(REGEX REPLACE "/MTd" "/MDd" ${flags} "${${flags}}")
		    endif()
        endforeach()
    endif()
    set(LIBGLTF_PLATFORM_WINDOWS TRUE)
    add_definitions(-DLIBGLTF_PLATFORM_WINDOWS)
    set(DYNAMIC_LIBRARY_EXTENSION ".dll")
    set(STATIC_LIBRARY_EXTENSION ".lib")
    if((CMAKE_EXE_LINKER_FLAGS STREQUAL "/machine:X86") OR (CMAKE_EXE_LINKER_FLAGS STREQUAL " /machine:X86"))
        set(TARGET_ARCHITECTURES_X86 TRUE)
        set(PLATFORM_NAME "win32")
    elseif((CMAKE_EXE_LINKER_FLAGS STREQUAL "/machine:x64") OR (CMAKE_EXE_LINKER_FLAGS STREQUAL " /machine:x64"))
        set(TARGET_ARCHITECTURES_X64 TRUE)
        set(PLATFORM_NAME "win64")
    endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(LIBGLTF_PLATFORM_LINUX TRUE)
    add_definitions(-DLIBGLTF_PLATFORM_LINUX)
    set(DYNAMIC_LIBRARY_EXTENSION ".so")
    set(STATIC_LIBRARY_EXTENSION ".a")
    set(PLATFORM_NAME "linux")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -Wshadow -Wconversion -Wno-long-long -pedantic")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -Wshadow -Wconversion -Wsign-conversion -Wno-long-long -pedantic")
    set(CMAKE_STATIC_LIBRARY_PREFIX "")
    set(CMAKE_SHARED_LIBRARY_PREFIX "")
    if(LIBGLTF_COVERAGE_GCOV)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage -fPIC")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage -fPIC")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fprofile-arcs -lgcov")
        add_definitions(-DBUILD_COVERALLS)
    endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL "Android")
    set(LIBGLTF_PLATFORM_ANDROID TRUE)
    add_definitions(-DLIBGLTF_PLATFORM_ANDROID)
    set(DYNAMIC_LIBRARY_EXTENSION ".so")
    set(STATIC_LIBRARY_EXTENSION ".a")
    set(PLATFORM_NAME "android")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -Wshadow -Wconversion -Wno-long-long -pedantic")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -Wshadow -Wconversion -Wsign-conversion -Wno-long-long -pedantic")
    set(CMAKE_STATIC_LIBRARY_PREFIX "")
    set(CMAKE_SHARED_LIBRARY_PREFIX "")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND (NOT ${LIBGLTF_PLATFORM_IOS}))
    set(LIBGLTF_PLATFORM_MACOS TRUE)
    add_definitions(-DLIBGLTF_PLATFORM_MACOS)
    set(DYNAMIC_LIBRARY_EXTENSION ".dylib")
    set(STATIC_LIBRARY_EXTENSION ".a")
    set(PLATFORM_NAME "macos")
    set(CMAKE_C_FLAGS "-Wall -Wextra -Wshadow -Wconversion -Wno-long-long -pedantic ${CMAKE_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "-std=c++11 -Wall -Wextra -Wshadow -Wconversion -Wsign-conversion -Wno-long-long -pedantic ${CMAKE_CXX_FLAGS}")
    set(CMAKE_STATIC_LIBRARY_PREFIX "")
    set(CMAKE_SHARED_LIBRARY_PREFIX "")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND ${LIBGLTF_PLATFORM_IOS})
    set(LIBGLTF_PLATFORM_IOS TRUE)
    add_definitions(-DLIBGLTF_PLATFORM_IOS)
    set(DYNAMIC_LIBRARY_EXTENSION ".dylib")
    set(STATIC_LIBRARY_EXTENSION ".a")
    set(PLATFORM_NAME "ios")
    set(CMAKE_C_FLAGS "-Wall -Wextra -Wshadow -Wconversion -Wno-long-long -pedantic ${CMAKE_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "-std=c++11 -Wall -Wextra -Wshadow -Wconversion -Wsign-conversion -Wno-long-long -pedantic ${CMAKE_CXX_FLAGS}")
    set(CMAKE_STATIC_LIBRARY_PREFIX "")
    set(CMAKE_SHARED_LIBRARY_PREFIX "")
endif()

if((NOT ${LIBGLTF_PLATFORM_WINDOWS}) AND (NOT ${LIBGLTF_PLATFORM_LINUX}) AND (NOT ${LIBGLTF_PLATFORM_ANDROID}) AND (NOT ${LIBGLTF_PLATFORM_MACOS}) AND (NOT ${LIBGLTF_PLATFORM_IOS}))
    message(FATAL_ERROR "Sorry, don't support your system ${CMAKE_SYSTEM_NAME}!")
endif()

set(ROOT_PATH "${PROJECT_SOURCE_DIR}")
set(HEADER_PATH "${ROOT_PATH}/include")
set(SOURCE_PATH "${ROOT_PATH}/source")
set(TOOLS_PATH "${ROOT_PATH}/tools")
set(EXTERNAL_PATH "${ROOT_PATH}/external")
if(NOT CUSTOM_OUT_PATH)
    set(OUT_PATH "${ROOT_PATH}/output")
else()
    set(OUT_PATH ${CUSTOM_OUT_PATH})
endif()
set(OUT_BIN_PATH "${OUT_PATH}/bin/${PLATFORM_NAME}")
set(OUT_LIB_PATH "${OUT_PATH}/lib/${PLATFORM_NAME}")

# supports more charactor encodings
set(LIBGLTF_CHARACTOR_ENCODING UTF8 CACHE STRING "String code")
set_property(CACHE LIBGLTF_CHARACTOR_ENCODING PROPERTY STRINGS UTF8 UTF16 UTF32 UNICODE)

# integrate the Google's draco
set(LIBGLTF_USE_GOOGLE_DRACO OFF CACHE BOOL "Use Google's Draco?")
if(LIBGLTF_USE_GOOGLE_DRACO)
    set(LIBGLTF_USE_GOOGLE_DRACO_SUBMODULE TRUE CACHE BOOL "Use Submodule - Google's Draco?")
    if (LIBGLTF_USE_GOOGLE_DRACO_SUBMODULE)
        add_subdirectory(${EXTERNAL_PATH}/draco)
        set_target_properties(draco PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_animation PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_animation_dec PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_animation_enc PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_attributes PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_attributes_dec PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_attributes_enc PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_attributes_pred_schemes_dec PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_attributes_pred_schemes_enc PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_bit_coders PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_decode PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_encode PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_entropy PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_mesh_dec PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_mesh_enc PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_mesh_traverser PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_point_cloud_dec PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_compression_point_cloud_enc PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_core PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_dec_config PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_decoder PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_enc_config PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_encoder PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_io PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_mesh PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_metadata PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_metadata_dec PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_metadata_enc PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_point_cloud PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_points_dec PROPERTIES FOLDER externals/draco)
        set_target_properties(draco_points_enc PROPERTIES FOLDER externals/draco)
        set_target_properties(dracodec PROPERTIES FOLDER externals/draco)
        set_target_properties(dracoenc PROPERTIES FOLDER externals/draco)
        set(GOOGLE_DRACO_PATH_INCLUDE ${EXTERNAL_PATH}/draco/src)
        set(GOOGLE_DRACO_PATH_BUILD ${CMAKE_BINARY_DIR})
    else()
        find_package(GoogleDraco)
        if(GOOGLEDRACO_FOUND)
            message(STATUS "Found Google's Draco: Support the extension `KHR_draco_mesh_compression` to compress the mesh data by draco and enabled")
        else()
            message(FATAL_ERROR "Not found Google's Draco: Not support the extension `KHR_draco_mesh_compression` to compress the mesh data by draco")
        endif()
    endif()
endif()

if(LIBGLTF_PLATFORM_LINUX)
    set(LIBGLTF_COVERAGE_GCOV OFF CACHE BOOL "Coverage gcov (debug, Linux builds only)")
endif()

if((CMAKE_COMPILER_IS_GNUCC STREQUAL "1") OR (CMAKE_COMPILER_IS_GNUCXX STREQUAL "1"))
    add_definitions(-DCOMPILER_IS_GCC)
endif()

if(${LIBGLTF_CHARACTOR_ENCODING} STREQUAL "UTF8")
    add_definitions(-DLIBGLTF_CHARACTOR_ENCODING_IS_UTF8)
elseif(${LIBGLTF_CHARACTOR_ENCODING} STREQUAL "UTF16")
    add_definitions(-DLIBGLTF_CHARACTOR_ENCODING_IS_UTF16)
elseif(${LIBGLTF_CHARACTOR_ENCODING} STREQUAL "UTF32")
    add_definitions(-DLIBGLTF_CHARACTOR_ENCODING_IS_UTF32)
elseif(${LIBGLTF_CHARACTOR_ENCODING} STREQUAL "UNICODE")
    add_definitions(-DLIBGLTF_CHARACTOR_ENCODING_IS_UNICODE)
    if(${LIBGLTF_PLATFORM_WINDOWS})
        add_definitions(-DUNICODE -D_UNICODE)
    endif()
endif()

if(${LIBGLTF_BUILD_GCOV})
    if(${LIBGLTF_PLATFORM_LINUX})
        add_definitions(-DLIBGLTF_BUILD_COVERAGE)
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
        set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
        set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage -lgcov")
    else()
        message(FATAL_ERROR "Sorry, don't support gcov in your system ${CMAKE_SYSTEM_NAME}!")
    endif()
endif()

set(LIBGLTF_BUILD_RUNTEST TRUE CACHE BOOL "Build runtest?")

add_subdirectory(docs)
add_subdirectory(source)
add_subdirectory(tools)

set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT libgltf)
